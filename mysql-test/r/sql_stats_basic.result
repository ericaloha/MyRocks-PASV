create user user_super@localhost identified by 'su';
grant all on *.* to user_super@localhost with grant option;
Case 1: sql_stats_control=OFF_HARD
select @@sql_stats_control;
@@sql_stats_control
OFF_HARD
select 42;
42
42
select sql_id, plan_id, table_schema, user_name, execution_count
from information_schema.sql_statistics;
sql_id	plan_id	table_schema	user_name	execution_count
Case 2: sql_stats_control=ON
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
set @@GLOBAL.sql_plans_control=ON;
select @@sql_plans_control;
@@sql_plans_control
ON
select 1;
1
1
select 2;
2
2
select 100;
100
100
select sql_id, plan_id, table_schema, user_name, execution_count
from information_schema.sql_statistics order by sql_id;
sql_id	plan_id	table_schema	user_name	execution_count
0448f3d24e4d02752389c951b6da98b1	NULL	test	user_super	3
b83dc7fc415c9cbdb49b1bdf3f8272e1	NULL	test	user_super	1
e27c5cdf6a99b5400d5394fed7999a27	NULL	test	user_super	1
f3923e96b3200fb797805a1622d50fce	NULL	test	user_super	1
create table t1(c int);
insert into t1 values(1);
insert into t1 values(2);
insert into t1 values(3);
insert into t1 values(4);
insert into t1 values(5);
update t1 set c=c+100;
update t1 set c=c+300;
update t1 set c=c+500;
delete from t1 where c=905;
delete from t1 where c=903;
select a.c c1, b.c c2
from t1 a, t1 b
where a.c <= b.c
order by 1, 2;
c1	c2
901	901
901	902
901	904
902	902
902	904
904	904
select c.c, min(a.c), max(b.c)
from t1 a, t1 b, t1 c
where a.c <= b.c and a.c <= c.c
group by c.c
order by 1, 2, 3;
c	min(a.c)	max(b.c)
901	901	904
902	901	904
904	901	904
select a.c, b.c, sum(c.c)
from t1 a, t1 b, t1 c
where a.c <= b.c and a.c <= c.c
group by a.c, b.c
order by 1, 2, 3;
c	c	sum(c.c)
901	901	2707
901	902	2707
901	904	2707
902	902	1806
902	904	1806
904	904	904
select a.c, b.c, sum(c.c)
from t1 a, t1 b, t1 c
where a.c <= b.c and a.c <= c.c
group by a.c, b.c
having sum(c.c) < 2000
order by 1, 2, 3;
c	c	sum(c.c)
902	902	1806
902	904	1806
904	904	904
select a.c, b.c, sum(c.c)
from t1 a, t1 b, t1 c
where a.c <= b.c and a.c <= c.c
group by a.c, b.c
having sum(c.c) < 2000
order by 1, 2, 3;
c	c	sum(c.c)
902	902	1806
902	904	1806
904	904	904
select c
from t1 a
where exists (select sum_val
from (select a.c c1, b.c c2, sum(c.c) sum_val
from t1 a, t1 b, t1 c
where a.c <= b.c and a.c <= c.c
group by a.c, b.c having sum(c.c) < 2000) v1
where sum_val = a.c)
order by 1;
c
904
select c
from t1 a
where not exists (select sum_val
from (select a.c c1, b.c c2, sum(c.c) sum_val
from t1 a, t1 b, t1 c
where a.c <= b.c and a.c <= c.c
group by a.c, b.c having sum(c.c) < 2000) v1
where sum_val = a.c)
order by 1;
c
901
902
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written
from information_schema.sql_statistics
order by sql_id;
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
0448f3d24e4d02752389c951b6da98b1	NULL	test	user_super	3	0	0	0	0	3	0	0
0660aff6405a986b61bcf96e3c9c0eeb	a49336ae23cce474430146ec3a7d0ee3	test	user_super	1	0	0	0	9	3	0	0
115790d5caa4aa4c41170d787721a093	NULL	test	user_super	1	0	0	0	0	0	0	0
20e348ba32bf39ecbfa4161409915904	6c45f7957b65ebc76c1000cdfdb33186	test	user_super	1	0	0	0	6	6	0	0
4488f553b185292516085f7fce34723d	a49336ae23cce474430146ec3a7d0ee3	test	user_super	2	0	0	0	18	6	0	0
5272724305c2c990975c4a1f1611fa9c	5c222d3d3702516b33b9c023385ab93d	test	user_super	1	0	0	0	12	2	0	0
585ddd5705455eff24f3879ea2ba93af	5c222d3d3702516b33b9c023385ab93d	test	user_super	1	0	0	0	12	1	0	0
5d297aa0bf23bdacb24771b08a2039d2	0863aa843e03198bcd1fb35e2ba33940	test	user_super	2	0	0	2	9	0	0	0
61496664e13fbf642ce2fedd1c057adc	d8a6538dcb5999060d6f545dfb9ce16d	test	user_super	1	0	0	0	0	4	0	0
8a5876129638d090183167e45d244a98	a49336ae23cce474430146ec3a7d0ee3	test	user_super	1	0	0	0	9	6	0	0
a41d29f30d2b12c6cf1d3c1fa212bc98	7d1ccceff3a45eea46dbad6208f7f52e	test	user_super	3	0	15	0	15	0	0	0
b0d1c8aef69877d3fd8ccbcf92a899f3	c63aca0e3e2270468eaadb4364351527	test	user_super	5	5	0	0	0	0	0	0
b83dc7fc415c9cbdb49b1bdf3f8272e1	NULL	test	user_super	1	0	0	0	0	1	0	0
e27c5cdf6a99b5400d5394fed7999a27	NULL	test	user_super	1	0	0	0	0	1	0	0
f3923e96b3200fb797805a1622d50fce	NULL	test	user_super	1	0	0	0	0	0	0	0
select information_schema.sql_statistics.sql_id, table_schema, user_name,
execution_count, sql_text
from information_schema.sql_statistics, information_schema.sql_text
where information_schema.sql_statistics.sql_id=information_schema.sql_text.sql_id
order by sql_id;
sql_id	table_schema	user_name	execution_count	sql_text
0448f3d24e4d02752389c951b6da98b1	test	user_super	3	SELECT ? 
0660aff6405a986b61bcf96e3c9c0eeb	test	user_super	1	SELECT `c` . `c` , MIN ( `a` . `c` ) , MAX ( `b` . `c` ) FROM `t1` `a` , `t1` `b` , `t1` `c` WHERE `a` . `c` <= `b` . `c` AND `a` . `c` <= `c` . `c` GROUP BY `c` . `c` ORDER BY ?, ... 
115790d5caa4aa4c41170d787721a093	test	user_super	1	CREATE TABLE `t1` ( `c` INTEGER ) 
20e348ba32bf39ecbfa4161409915904	test	user_super	1	SELECT `a` . `c` `c1` , `b` . `c` `c2` FROM `t1` `a` , `t1` `b` WHERE `a` . `c` <= `b` . `c` ORDER BY ?, ... 
4488f553b185292516085f7fce34723d	test	user_super	2	SELECT `a` . `c` , `b` . `c` , SUM ( `c` . `c` ) FROM `t1` `a` , `t1` `b` , `t1` `c` WHERE `a` . `c` <= `b` . `c` AND `a` . `c` <= `c` . `c` GROUP BY `a` . `c` , `b` . `c` HAVING SUM ( `c` . `c` ) < ? ORDER BY ?, ... 
5272724305c2c990975c4a1f1611fa9c	test	user_super	1	SELECT `c` FROM `t1` `a` WHERE NOT EXISTS ( SELECT `sum_val` FROM ( SELECT `a` . `c` `c1` , `b` . `c` `c2` , SUM ( `c` . `c` ) `sum_val` FROM `t1` `a` , `t1` `b` , `t1` `c` WHERE `a` . `c` <= `b` . `c` AND `a` . `c` <= `c` . `c` GROUP BY `a` . `c` , `b` . `c` HAVING SUM ( `c` . `c` ) < ? ) `v1` WHERE `sum_val` = `a` . `c` ) ORDER BY ? 
585ddd5705455eff24f3879ea2ba93af	test	user_super	1	SELECT `c` FROM `t1` `a` WHERE EXISTS ( SELECT `sum_val` FROM ( SELECT `a` . `c` `c1` , `b` . `c` `c2` , SUM ( `c` . `c` ) `sum_val` FROM `t1` `a` , `t1` `b` , `t1` `c` WHERE `a` . `c` <= `b` . `c` AND `a` . `c` <= `c` . `c` GROUP BY `a` . `c` , `b` . `c` HAVING SUM ( `c` . `c` ) < ? ) `v1` WHERE `sum_val` = `a` . `c` ) ORDER BY ? 
5d297aa0bf23bdacb24771b08a2039d2	test	user_super	2	DELETE FROM `t1` WHERE `c` = ? 
61496664e13fbf642ce2fedd1c057adc	test	user_super	1	SELECT `sql_id` , `plan_id` , `table_schema` , `user_name` , `execution_count` FROM `information_schema` . `sql_statistics` ORDER BY `sql_id` 
8a5876129638d090183167e45d244a98	test	user_super	1	SELECT `a` . `c` , `b` . `c` , SUM ( `c` . `c` ) FROM `t1` `a` , `t1` `b` , `t1` `c` WHERE `a` . `c` <= `b` . `c` AND `a` . `c` <= `c` . `c` GROUP BY `a` . `c` , `b` . `c` ORDER BY ?, ... 
a41d29f30d2b12c6cf1d3c1fa212bc98	test	user_super	3	UPDATE `t1` SET `c` = `c` + ? 
b0d1c8aef69877d3fd8ccbcf92a899f3	test	user_super	5	INSERT INTO `t1` VALUES (?) 
b83dc7fc415c9cbdb49b1bdf3f8272e1	test	user_super	1	SELECT @@`sql_plans_control` 
d46f83f75d88f443003d2e133a3fc3df	test	user_super	1	SELECT `sql_id` , `plan_id` , `table_schema` , `user_name` , `execution_count` , `rows_inserted` , `rows_updated` , `rows_deleted` , `rows_read` , `rows_sent` , `tmp_table_bytes_written` , `filesort_bytes_written` FROM `information_schema` . `sql_statistics` ORDER BY `sql_id` 
e27c5cdf6a99b5400d5394fed7999a27	test	user_super	1	SELECT @@`sql_stats_control` 
f3923e96b3200fb797805a1622d50fce	test	user_super	1	SET @@GLOBAL . `sql_plans_control` = ON 
Case 3: sql_stats_control=OFF_SOFT. Disable collection, but keep the data around.
set @@GLOBAL.sql_stats_control="OFF_SOFT";
select @@sql_stats_control;
@@sql_stats_control
OFF_SOFT
select 1 union select 2;
1
1
2
select 1 union select 2 union select 3;
1
1
2
3
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written
from information_schema.sql_statistics
order by sql_id;
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
01e7397e2cdbee57e94c0ca56c396aa7	2eea1bb868964e5a66a4f786e40cfbf3	test	user_super	1	0	0	0	0	16	0	0
0448f3d24e4d02752389c951b6da98b1	NULL	test	user_super	3	0	0	0	0	3	0	0
0660aff6405a986b61bcf96e3c9c0eeb	a49336ae23cce474430146ec3a7d0ee3	test	user_super	1	0	0	0	9	3	0	0
115790d5caa4aa4c41170d787721a093	NULL	test	user_super	1	0	0	0	0	0	0	0
20e348ba32bf39ecbfa4161409915904	6c45f7957b65ebc76c1000cdfdb33186	test	user_super	1	0	0	0	6	6	0	0
4488f553b185292516085f7fce34723d	a49336ae23cce474430146ec3a7d0ee3	test	user_super	2	0	0	0	18	6	0	0
5272724305c2c990975c4a1f1611fa9c	5c222d3d3702516b33b9c023385ab93d	test	user_super	1	0	0	0	12	2	0	0
585ddd5705455eff24f3879ea2ba93af	5c222d3d3702516b33b9c023385ab93d	test	user_super	1	0	0	0	12	1	0	0
5d297aa0bf23bdacb24771b08a2039d2	0863aa843e03198bcd1fb35e2ba33940	test	user_super	2	0	0	2	9	0	0	0
61496664e13fbf642ce2fedd1c057adc	d8a6538dcb5999060d6f545dfb9ce16d	test	user_super	1	0	0	0	0	4	0	0
8a5876129638d090183167e45d244a98	a49336ae23cce474430146ec3a7d0ee3	test	user_super	1	0	0	0	9	6	0	0
a41d29f30d2b12c6cf1d3c1fa212bc98	7d1ccceff3a45eea46dbad6208f7f52e	test	user_super	3	0	15	0	15	0	0	0
b0d1c8aef69877d3fd8ccbcf92a899f3	c63aca0e3e2270468eaadb4364351527	test	user_super	5	5	0	0	0	0	0	0
b83dc7fc415c9cbdb49b1bdf3f8272e1	NULL	test	user_super	1	0	0	0	0	1	0	0
d46f83f75d88f443003d2e133a3fc3df	d8a6538dcb5999060d6f545dfb9ce16d	test	user_super	1	0	0	0	0	15	0	0
e27c5cdf6a99b5400d5394fed7999a27	NULL	test	user_super	1	0	0	0	0	1	0	0
f3923e96b3200fb797805a1622d50fce	NULL	test	user_super	1	0	0	0	0	0	0	0
Case 4: sql_stats_control=OFF_HARD. Disable, and check if all data is deleted.
set @@GLOBAL.sql_stats_control="OFF_HARD";
select @@sql_stats_control;
@@sql_stats_control
OFF_HARD
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written
from information_schema.sql_statistics
order by sql_id;
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
Case 5: sql_stats_control=ON. Re-enable to make sure that data is making its way to sql_statistics.
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 101;
101
101
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written
from information_schema.sql_statistics
order by sql_id;
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
0448f3d24e4d02752389c951b6da98b1	NULL	test	user_super	1	0	0	0	0	1	0	0
e27c5cdf6a99b5400d5394fed7999a27	NULL	test	user_super	1	0	0	0	0	1	0	0
Case 6: Multi-query support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
select 2;
select 3;
create table t2(c int);
insert into t2 values(100);
select * from t2;
update t2 set c=c+7;
delete from t2 where c=107;
drop table t2;
||||
1
1
2
2
3
3
c
100
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written
from information_schema.sql_statistics
order by sql_id||||
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
0448f3d24e4d02752389c951b6da98b1	NULL	test	user_super	3	0	0	0	0	3	0	0
08e2e1aa05ce79fab18802903ff52353	3735d0563cc8e7df82f25be86d592dc1	test	user_super	1	0	1	0	1	0	0	0
3899758cccb9d26c0134dd59cca080c5	f343b9befca0a2e2d56935211139703e	test	user_super	1	0	0	1	1	0	0	0
6a27ad290846ca8699dca282fa3f10a3	c63aca0e3e2270468eaadb4364351527	test	user_super	1	1	0	0	0	0	0	0
b7f7406ebf52639736c0b3dfbaf63bb3	NULL	test	user_super	1	0	0	0	0	0	0	0
d8dfdc1dc9c54e97f5a09cd3687f6bf7	NULL	test	user_super	1	0	0	0	0	0	0	0
e27c5cdf6a99b5400d5394fed7999a27	NULL	test	user_super	1	0	0	0	0	1	0	0
f8845f2e23dc354f349819ec2a3c70e1	5b09041e2c03efb8b820a1fda0bf8146	test	user_super	1	0	0	0	2	1	0	0
Case 7: Query no sampling by default
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
1
1
select 3;
3
3
select 4;
4
4
select sql_id, plan_id, table_schema, user_name, query_sample_text,
query_sample_seen, execution_count, rows_inserted, rows_updated,
rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written
from information_schema.sql_statistics
order by sql_id;
sql_id	plan_id	table_schema	user_name	query_sample_text	query_sample_seen	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
0448f3d24e4d02752389c951b6da98b1	NULL	test	user_super		NULL	3	0	0	0	0	3	0	0
e27c5cdf6a99b5400d5394fed7999a27	NULL	test	user_super		NULL	1	0	0	0	0	1	0	0
Case 8: Query Only Once Sampling support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
set @@GLOBAL.max_digest_sample_age=0;
select @@sql_stats_control;
@@sql_stats_control
ON
select @@max_digest_sample_age;
@@max_digest_sample_age
0
select 1;
1
1
select 3;
3
3
select 4;
4
4
select sql_id, plan_id, table_schema, user_name, query_sample_text,
(query_sample_seen > 0) as is_query_sample_seen_valid, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written
from information_schema.sql_statistics
order by sql_id;
sql_id	plan_id	table_schema	user_name	query_sample_text	is_query_sample_seen_valid	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
03fe8e4607a4d56b50bff20d1bc67176	NULL	test	user_super	set @@GLOBAL.max_digest_sample_age=0	1	1	0	0	0	0	0	0	0
0448f3d24e4d02752389c951b6da98b1	NULL	test	user_super	select 1	1	3	0	0	0	0	3	0	0
7b049b2c451da141323a2d3a34f3b702	NULL	test	user_super	select @@max_digest_sample_age	1	1	0	0	0	0	1	0	0
e27c5cdf6a99b5400d5394fed7999a27	NULL	test	user_super	select @@sql_stats_control	1	1	0	0	0	0	1	0	0
Case 9: Query Re-sampling support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
set @@GLOBAL.max_digest_sample_age=1;
select @@sql_stats_control;
@@sql_stats_control
ON
select @@max_digest_sample_age;
@@max_digest_sample_age
1
select 1;
1
1
select sleep(2);
sleep(2)
0
select 3;
3
3
select 4;
4
4
select sql_id, plan_id, table_schema, user_name, query_sample_text,
(query_sample_seen > 0 && CURRENT_TIMESTAMP - query_sample_seen < 10)
as is_query_sample_seen_valid, execution_count, rows_inserted,
rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written
from information_schema.sql_statistics
where sql_id = 'ea1a18bec5a37513f7a0720e73526477'
order by sql_id;
sql_id	plan_id	table_schema	user_name	query_sample_text	is_query_sample_seen_valid	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
Case 10: Multi-query support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
select 2;
select 3;
create table t10(c int);
insert into t10 values(1);
insert into t10 values(2);
insert into t10 values(3);
insert into t10 select * from t10;
insert into t10 select * from t10;
insert into t10 select * from t10;
select c from t10 order by 1;
select * from t10 where c=1 order by 1;
drop table t10;
||||
1
1
2
2
3
3
c
1
1
1
1
1
1
1
1
2
2
2
2
2
2
2
2
3
3
3
3
3
3
3
3
c
1
1
1
1
1
1
1
1
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written
from information_schema.sql_statistics
order by sql_id||||
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
0448f3d24e4d02752389c951b6da98b1	NULL	test	user_super	3	0	0	0	0	3	0	0
1f190da0b32921035695df19c81d513b	NULL	test	user_super	1	0	0	0	0	0	0	0
5293635f719ecd8854fe9ae5d80b2ea0	a87c8388de86c82198fa06675de68c3f	test	user_super	1	0	0	0	24	8	0	0
6a084d4b518d797082c40b1149c0c304	0c68a814e4bc7ce05336789421cdeee2	test	user_super	3	21	0	0	21	0	0	0
a7aa3561f11c055c76ff1d797578321b	bb775f67f5bdb8c07f6fc05195cea244	test	user_super	1	0	0	0	24	24	0	0
e27c5cdf6a99b5400d5394fed7999a27	NULL	test	user_super	1	0	0	0	0	1	0	0
f187615046cfbe7d1a88a3ec86aadcd0	c63aca0e3e2270468eaadb4364351527	test	user_super	3	3	0	0	0	0	0	0
f7467ccac03c7da89b942711fa90df94	NULL	test	user_super	1	0	0	0	0	0	0	0
Case 11: Multi-query support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
select 2;
select 3;
create table t11(c int);
insert into t11 values(1);
insert into t11 values(2);
insert into t11 values(3);
insert into t11 select * from t11;
insert into t11 select * from t11;
insert into t11 select * from t11;
select c from t11 order by 1;
select * from t11 where c=1 order by 1;
update t11 set c=c+100 where c>1;
drop table t11;
||||
1
1
2
2
3
3
c
1
1
1
1
1
1
1
1
2
2
2
2
2
2
2
2
3
3
3
3
3
3
3
3
c
1
1
1
1
1
1
1
1
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written
from information_schema.sql_statistics
order by sql_id||||
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
0448f3d24e4d02752389c951b6da98b1	NULL	test	user_super	3	0	0	0	0	3	0	0
0c59077a70a2aeac4818c0bb4cb6627e	c24516a3e2e6f108b2f12ff638860fd6	test	user_super	1	0	16	0	24	0	0	0
19771d4aba4c1bf5e4ee248c36e5ec56	c63aca0e3e2270468eaadb4364351527	test	user_super	3	3	0	0	0	0	0	0
1d42a0d65a0cc393f9b6da0252503504	NULL	test	user_super	1	0	0	0	0	0	0	0
3e7fec38c1f03cfaf3d69b8d16c57be2	NULL	test	user_super	1	0	0	0	0	0	0	0
5229da5a139654c16958b1a576c2552b	4e629c338e9448ec75b16454a974ce37	test	user_super	3	21	0	0	21	0	0	0
6e9e39b0ef2e1a1067e29d1a97f05739	1205d6f41cfd8eee9ac0fefed3b7a5ad	test	user_super	1	0	0	0	24	8	0	0
e27c5cdf6a99b5400d5394fed7999a27	NULL	test	user_super	1	0	0	0	0	1	0	0
eb4925497c3d55620c4fab16fba4e384	8f26bb7e672b92ab2d74613a6b1e3b14	test	user_super	1	0	0	0	24	24	0	0
Case 12: Multi-query support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
select 2;
select 3;
create table t12(c int);
insert into t12 values(1);
insert into t12 values(2);
insert into t12 values(3);
insert into t12 select * from t12;
insert into t12 select * from t12;
insert into t12 select * from t12;
select c from t12 order by 1;
select * from t12 where c=1 order by 1;
insert into t12 select * from t12 where c > 1;
drop table t12;
||||
1
1
2
2
3
3
c
1
1
1
1
1
1
1
1
2
2
2
2
2
2
2
2
3
3
3
3
3
3
3
3
c
1
1
1
1
1
1
1
1
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written
from information_schema.sql_statistics
order by sql_id||||
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
0448f3d24e4d02752389c951b6da98b1	NULL	test	user_super	3	0	0	0	0	3	0	0
3dbbb61cc4c822932c7ccb3f377a142a	NULL	test	user_super	1	0	0	0	0	0	0	0
69d4bd4fb32a7e5c70db97a826b383d8	c63aca0e3e2270468eaadb4364351527	test	user_super	3	3	0	0	0	0	0	0
70a04dd805498899a23e858c174b4e59	NULL	test	user_super	1	0	0	0	0	0	0	0
90d54180866cc4d7c8deeca49f37e5b7	d4d42e245869a5ad6d4c991f37715319	test	user_super	1	0	0	0	24	24	0	0
a1cb320bf5154af3215175d77317d450	e20fa51953e77162c47d427dc9b3d796	test	user_super	3	21	0	0	21	0	0	0
a671ff0e794e504edd0e7992c77e7b1d	63ce70a8b3d6b3b07ed5d4504741c52b	test	user_super	1	0	0	0	24	8	0	0
e27c5cdf6a99b5400d5394fed7999a27	NULL	test	user_super	1	0	0	0	0	1	0	0
e6770ada1de10d675bc36e6b51c32e6e	e20fa51953e77162c47d427dc9b3d796	test	user_super	1	16	0	0	24	0	0	0
Case 13: Multi-query support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
select 2;
select 3;
create table t13(c int);
insert into t13 values(1);
insert into t13 values(2);
insert into t13 values(3);
insert into t13 select * from t13;
insert into t13 select * from t13;
insert into t13 select * from t13;
select c from t13 order by 1;
select * from t13 where c=1 order by 1;
insert into t13 select * from t13 where c > 1;
update t13 set c=c+100 where c>1;
drop table t13;
||||
1
1
2
2
3
3
c
1
1
1
1
1
1
1
1
2
2
2
2
2
2
2
2
3
3
3
3
3
3
3
3
c
1
1
1
1
1
1
1
1
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written
from information_schema.sql_statistics
order by sql_id||||
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
0448f3d24e4d02752389c951b6da98b1	NULL	test	user_super	3	0	0	0	0	3	0	0
2789114df08be92e4226bcabcbb38d95	78e987e8c5aed34aa2ace332289a7412	test	user_super	1	0	0	0	24	24	0	0
505a72eddc224819447edba7e0e0db0f	4a90aceb0568c53439dd6a23089fe389	test	user_super	3	21	0	0	21	0	0	0
698b6fa2700b0c588c211dd2a8378b29	NULL	test	user_super	1	0	0	0	0	0	0	0
6cf00464c47a44f346dd61348a48b02c	4b974e5532640edc9fa95b3beb67899e	test	user_super	1	0	32	0	40	0	0	0
b7650098d409f63b73ee65a480094989	NULL	test	user_super	1	0	0	0	0	0	0	0
d046137b000bcb3ed8171a31a9e0a4c6	4a90aceb0568c53439dd6a23089fe389	test	user_super	1	16	0	0	24	0	0	0
e27c5cdf6a99b5400d5394fed7999a27	NULL	test	user_super	1	0	0	0	0	1	0	0
ea0611e00466c5fbfff21859a5535143	aff29d3a71e81392f86033f8e503c8e1	test	user_super	1	0	0	0	24	8	0	0
edf00ebd0ff2854bb8f94afc808ebe2d	c63aca0e3e2270468eaadb4364351527	test	user_super	3	3	0	0	0	0	0	0
Case 14: Multi-query support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
select 2;
select 3;
create table t14(c int);
insert into t14 values(1);
insert into t14 values(2);
insert into t14 values(3);
insert into t14 select * from t14;
insert into t14 select * from t14;
insert into t14 select * from t14;
select * from t14 where c=1 order by 1;
insert into t14 select * from t14 where c > 1;
update t14 set c=c+100 where c>1;
drop table t14;
||||
1
1
2
2
3
3
c
1
1
1
1
1
1
1
1
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written
from information_schema.sql_statistics
order by sql_id||||
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
0448f3d24e4d02752389c951b6da98b1	NULL	test	user_super	3	0	0	0	0	3	0	0
2240ce1dd399bfc1fd6f3e5b55f0d283	b248616d23287bf9c4d4475c91614bf5	test	user_super	1	0	0	0	24	8	0	0
658c0e04a337ae3f568db2846c32ead9	29176a01eb28ce8e2190b1e2fad60f75	test	user_super	3	21	0	0	21	0	0	0
88fe191ede151cda8a3c0686d9d77841	c63aca0e3e2270468eaadb4364351527	test	user_super	3	3	0	0	0	0	0	0
991fa14b9229684f268b760ab673c31f	d814f7204842756b5a4bd40bd006d886	test	user_super	1	0	32	0	40	0	0	0
a29d96e6a7ca53ba1a8c2cc10095cdcb	29176a01eb28ce8e2190b1e2fad60f75	test	user_super	1	16	0	0	24	0	0	0
a73768e04e9d93e8bc748510af0128c6	NULL	test	user_super	1	0	0	0	0	0	0	0
e27c5cdf6a99b5400d5394fed7999a27	NULL	test	user_super	1	0	0	0	0	1	0	0
f334ce54493b4df3e973c2370382c47d	NULL	test	user_super	1	0	0	0	0	0	0	0
Case 15: Multi-query support
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
select 1;
select 2;
select 3;
create table t15(c int);
insert into t15 values(1);
insert into t15 values(2);
insert into t15 values(3);
insert into t15 select * from t15;
insert into t15 select * from t15;
insert into t15 select * from t15;
insert into t15 select * from t15 where c > 1;
update t15 set c=c+100 where c>1;
drop table t15;
||||
1
1
2
2
3
3
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent,
tmp_table_bytes_written, filesort_bytes_written
from information_schema.sql_statistics
order by sql_id||||
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
0448f3d24e4d02752389c951b6da98b1	NULL	test	user_super	3	0	0	0	0	3	0	0
2b85decb443e2637268d6c31e015c69e	NULL	test	user_super	1	0	0	0	0	0	0	0
57e3eba95857bdd253438f824b3276dd	NULL	test	user_super	1	0	0	0	0	0	0	0
aba6b507bce09ad55bae47f076d15d41	c351cb9aa35ffd197e5732574574e5dc	test	user_super	1	0	32	0	40	0	0	0
adbf60ef4a4d5383fecd8296e2ca7f5f	16439ba05833b9a72d3b040bdbd80dcd	test	user_super	1	16	0	0	24	0	0	0
b423eb4103cc740c4224acedccc2bf29	c63aca0e3e2270468eaadb4364351527	test	user_super	3	3	0	0	0	0	0	0
ceb9c94c5b12b5881ff044e25292188b	16439ba05833b9a72d3b040bdbd80dcd	test	user_super	3	21	0	0	21	0	0	0
e27c5cdf6a99b5400d5394fed7999a27	NULL	test	user_super	1	0	0	0	0	1	0	0
Case 16: Flush sql_statistics and confirm that all stats are gone.
flush sql_statistics;
select sql_id, plan_id, table_schema, user_name, execution_count,
rows_inserted, rows_updated, rows_deleted, rows_read, rows_sent
from information_schema.sql_statistics
order by sql_id;
sql_id	plan_id	table_schema	user_name	execution_count	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent
25719880df551a9058a6338635d05303	NULL	test	user_super	1	0	0	0	0	0
select * from information_schema.sql_text;
SQL_ID	SQL_TYPE	SQL_TEXT_LENGTH	SQL_TEXT
bb4be4c349279f26812ee1cc0371a5ca	SELECT	222	SELECT `sql_id` , `plan_id` , `table_schema` , `user_name` , `execution_count` , `rows_inserted` , `rows_updated` , `rows_deleted` , `rows_read` , `rows_sent` FROM `information_schema` . `sql_statistics` ORDER BY `sql_id` 
25719880df551a9058a6338635d05303	OTHER	21	FLUSH SQL_STATISTICS 
select count(*) from information_schema.client_attributes;
count(*)
1
Case 17: Temp Table Space and Filesort Space Statistics
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
create table t17 (i int, c char(255));
insert into t17 values (0, lpad('a', 250, 'b'));
insert into t17 select i+1,c from t17;
insert into t17 select i+2,c from t17;
insert into t17 select i+4,c from t17;
insert into t17 select i+8,c from t17;
insert into t17 select i+16,c from t17;
insert into t17 select i+32,c from t17;
insert into t17 select i+64,c from t17;
insert into t17 select i+128,c from t17;
insert into t17 select i+256,c from t17;
set session tmp_table_size=16384;
set session max_heap_table_size=16384;
set global sql_stats_control = ON;
insert into t17 select i+512,c from t17;
select i, substr(c, 1, 10) from t17 group by i, c;
select i, substr(c, 1, 10) from t17 order by i, c;
select i, substr(c, 1, 10) from t17 group by i, c order by i, c;
select count(*) from (select * from t17) v;
select t.sql_text, s.rows_inserted, s.rows_updated, s.rows_deleted,
s.rows_read, s.rows_sent, s.tmp_table_bytes_written, s.filesort_bytes_written
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id and t.sql_text not like '%information_schema%'
order by 1,2,3,4,5,6,7,8;
sql_text	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
CREATE TABLE `t17` ( `i` INTEGER , `c` CHARACTER (?) ) 	0	0	0	0	0	0	0
INSERT INTO `t17` SELECT `i` + ? , `c` FROM `t17` 	1	0	0	2	0	0	0
INSERT INTO `t17` SELECT `i` + ? , `c` FROM `t17` 	1022	0	0	1022	0	135168	0
INSERT INTO `t17` VALUES ( ? , `lpad` (...) ) 	1	0	0	0	0	0	0
SELECT @@`sql_stats_control` 	0	0	0	0	1	0	0
SELECT COUNT ( * ) FROM ( SELECT * FROM `t17` ) `v` 	0	0	0	1024	1	266240	0
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` GROUP BY `i` , `c` 	0	0	0	1024	1024	282624	826512
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` GROUP BY `i` , `c` ORDER BY `i` , `c` 	0	0	0	1024	1024	540672	1350848
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` ORDER BY `i` , `c` 	0	0	0	1024	1024	0	801936
SET GLOBAL `sql_stats_control` = ON 	0	0	0	0	0	0	0
SET SESSION `max_heap_table_size` = ? 	0	0	0	0	0	0	0
SET SESSION `tmp_table_size` = ? 	0	0	0	0	0	0	0
create temporary table tm_t17(i int, c char(255)) engine=myisam;
insert into tm_t17 select * from t17;
update tm_t17 set c = lpad('b', 250, 'a');
delete from tm_t17 where i < 100;
drop temporary table tm_t17;
select t.sql_text, s.rows_inserted, s.rows_updated, s.rows_deleted,
s.rows_read, s.rows_sent, s.tmp_table_bytes_written, s.filesort_bytes_written
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id and t.sql_text not like '%information_schema%'
order by 1,2,3,4,5,6,7,8;
sql_text	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
CREATE TABLE `t17` ( `i` INTEGER , `c` CHARACTER (?) ) 	0	0	0	0	0	0	0
CREATE TEMPORARY TABLE `tm_t17` ( `i` INTEGER , `c` CHARACTER (?) ) ENGINE = `myisam` 	0	0	0	0	0	0	0
DELETE FROM `tm_t17` WHERE `i` < ? 	0	0	0	0	0	700	0
DROP TEMPORARY TABLE `tm_t17` 	1024	1024	100	2048	0	0	0
INSERT INTO `t17` SELECT `i` + ? , `c` FROM `t17` 	1	0	0	2	0	0	0
INSERT INTO `t17` SELECT `i` + ? , `c` FROM `t17` 	1022	0	0	1022	0	135168	0
INSERT INTO `t17` VALUES ( ? , `lpad` (...) ) 	1	0	0	0	0	0	0
INSERT INTO `tm_t17` SELECT * FROM `t17` 	0	0	0	1024	0	266240	0
SELECT @@`sql_stats_control` 	0	0	0	0	1	0	0
SELECT COUNT ( * ) FROM ( SELECT * FROM `t17` ) `v` 	0	0	0	1024	1	266240	0
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` GROUP BY `i` , `c` 	0	0	0	1024	1024	282624	826512
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` GROUP BY `i` , `c` ORDER BY `i` , `c` 	0	0	0	1024	1024	540672	1350848
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` ORDER BY `i` , `c` 	0	0	0	1024	1024	0	801936
SET GLOBAL `sql_stats_control` = ON 	0	0	0	0	0	0	0
SET SESSION `max_heap_table_size` = ? 	0	0	0	0	0	0	0
SET SESSION `tmp_table_size` = ? 	0	0	0	0	0	0	0
UPDATE `tm_t17` SET `c` = `lpad` (...) 	0	0	0	0	0	266240	0
drop table t17;
select t.sql_text, s.rows_inserted, s.rows_updated, s.rows_deleted,
s.rows_read, s.rows_sent, s.tmp_table_bytes_written, s.filesort_bytes_written
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id and t.sql_text not like '%information_schema%'
order by 1,2,3,4,5,6,7,8;
sql_text	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
CREATE TABLE `t17` ( `i` INTEGER , `c` CHARACTER (?) ) 	0	0	0	0	0	0	0
CREATE TEMPORARY TABLE `tm_t17` ( `i` INTEGER , `c` CHARACTER (?) ) ENGINE = `myisam` 	0	0	0	0	0	0	0
DELETE FROM `tm_t17` WHERE `i` < ? 	0	0	0	0	0	700	0
DROP TABLE `t17` 	0	0	0	0	0	0	0
DROP TEMPORARY TABLE `tm_t17` 	1024	1024	100	2048	0	0	0
INSERT INTO `t17` SELECT `i` + ? , `c` FROM `t17` 	1	0	0	2	0	0	0
INSERT INTO `t17` SELECT `i` + ? , `c` FROM `t17` 	1022	0	0	1022	0	135168	0
INSERT INTO `t17` VALUES ( ? , `lpad` (...) ) 	1	0	0	0	0	0	0
INSERT INTO `tm_t17` SELECT * FROM `t17` 	0	0	0	1024	0	266240	0
SELECT @@`sql_stats_control` 	0	0	0	0	1	0	0
SELECT COUNT ( * ) FROM ( SELECT * FROM `t17` ) `v` 	0	0	0	1024	1	266240	0
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` GROUP BY `i` , `c` 	0	0	0	1024	1024	282624	826512
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` GROUP BY `i` , `c` ORDER BY `i` , `c` 	0	0	0	1024	1024	540672	1350848
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t17` ORDER BY `i` , `c` 	0	0	0	1024	1024	0	801936
SET GLOBAL `sql_stats_control` = ON 	0	0	0	0	0	0	0
SET SESSION `max_heap_table_size` = ? 	0	0	0	0	0	0	0
SET SESSION `tmp_table_size` = ? 	0	0	0	0	0	0	0
UPDATE `tm_t17` SET `c` = `lpad` (...) 	0	0	0	0	0	266240	0
Case 18: Multiple statement support for Temp Table Space and Filesort Space Statistics
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_stats_control="ON";
select @@sql_stats_control;
@@sql_stats_control
ON
create table t18 (i int, c char(255));
insert into t18 values (0, lpad('a', 250, 'b'));
insert into t18 select i+1,c from t18;
insert into t18 select i+2,c from t18;
insert into t18 select i+4,c from t18;
insert into t18 select i+8,c from t18;
insert into t18 select i+16,c from t18;
insert into t18 select i+32,c from t18;
insert into t18 select i+64,c from t18;
insert into t18 select i+128,c from t18;
insert into t18 select i+256,c from t18;
set session tmp_table_size=16384;
set session max_heap_table_size=16384;
set global sql_stats_control = ON;
select t.sql_text, s.rows_inserted, s.rows_updated, s.rows_deleted,
s.rows_read, s.rows_sent, s.tmp_table_bytes_written, s.filesort_bytes_written
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id and t.sql_text not like '%information_schema%'
order by 1,2,3,4,5,6,7,8;
sql_text	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
CREATE TABLE `t18` ( `i` INTEGER , `c` CHARACTER (?) ) 	0	0	0	0	0	0	0
INSERT INTO `t18` SELECT `i` + ? , `c` FROM `t18` 	1	0	0	2	0	0	0
INSERT INTO `t18` SELECT `i` + ? , `c` FROM `t18` 	510	0	0	510	0	118272	0
INSERT INTO `t18` VALUES ( ? , `lpad` (...) ) 	1	0	0	0	0	0	0
SELECT @@`sql_stats_control` 	0	0	0	0	1	0	0
SET GLOBAL `sql_stats_control` = ON 	0	0	0	0	0	0	0
SET SESSION `max_heap_table_size` = ? 	0	0	0	0	0	0	0
SET SESSION `tmp_table_size` = ? 	0	0	0	0	0	0	0
insert into t18 select i+512,c from t18;
select i, substr(c, 1, 10) from t18 group by i, c;
select i, substr(c, 1, 10) from t18 order by i, c;
select i, substr(c, 1, 10) from t18 group by i, c order by i, c;
select count(*) from (select * from t18) v;
create temporary table tm_t18(i int, c char(255)) engine=myisam;
insert into tm_t18 select * from t18;
update tm_t18 set c = lpad('b', 250, 'a');
delete from tm_t18 where i < 100;
drop temporary table tm_t18;
drop table t18;
||||
select t.sql_text, s.rows_inserted, s.rows_updated, s.rows_deleted,
s.rows_read, s.rows_sent, s.tmp_table_bytes_written, s.filesort_bytes_written
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id and t.sql_text not like '%information_schema%'
order by 1,2,3,4,5,6,7,8||||
sql_text	rows_inserted	rows_updated	rows_deleted	rows_read	rows_sent	tmp_table_bytes_written	filesort_bytes_written
CREATE TABLE `t18` ( `i` INTEGER , `c` CHARACTER (?) ) 	0	0	0	0	0	0	0
CREATE TEMPORARY TABLE `tm_t18` ( `i` INTEGER , `c` CHARACTER (?) ) ENGINE = `myisam` 	0	0	0	0	0	0	0
DELETE FROM `tm_t18` WHERE `i` < ? 	0	0	0	0	0	700	0
DROP TABLE `t18` 	0	0	0	0	0	0	0
DROP TEMPORARY TABLE `tm_t18` 	1024	1024	100	2048	0	0	0
INSERT INTO `t18` SELECT `i` + ? , `c` FROM `t18` 	1	0	0	2	0	0	0
INSERT INTO `t18` SELECT `i` + ? , `c` FROM `t18` 	1022	0	0	1022	0	253440	0
INSERT INTO `t18` VALUES ( ? , `lpad` (...) ) 	1	0	0	0	0	0	0
INSERT INTO `tm_t18` SELECT * FROM `t18` 	0	0	0	1024	0	266240	0
SELECT @@`sql_stats_control` 	0	0	0	0	1	0	0
SELECT COUNT ( * ) FROM ( SELECT * FROM `t18` ) `v` 	0	0	0	1024	1	266240	0
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t18` GROUP BY `i` , `c` 	0	0	0	1024	1024	282624	826512
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t18` GROUP BY `i` , `c` ORDER BY `i` , `c` 	0	0	0	1024	1024	540672	1350848
SELECT `i` , SUBSTRING ( `c` , ?, ... ) FROM `t18` ORDER BY `i` , `c` 	0	0	0	1024	1024	0	801936
SET GLOBAL `sql_stats_control` = ON 	0	0	0	0	0	0	0
SET SESSION `max_heap_table_size` = ? 	0	0	0	0	0	0	0
SET SESSION `tmp_table_size` = ? 	0	0	0	0	0	0	0
UPDATE `tm_t18` SET `c` = `lpad` (...) 	0	0	0	0	0	266240	0
set global sql_stats_control=OFF_HARD;
create table idx_dive_tbl(a1 int, a2 int, a3 int, a4 int, a5 int,
a6 int, a7 int, a8 int, a9 int, a10 int);
create procedure populate()
begin
declare i int default 0;
while i < 100 do
insert into idx_dive_tbl values(i, i+1, i+2, i+3, i+4,
i, i+1, i+2, i+3, i+4);
set i = i + 1;
end while;
end //
call populate();
create index idx_dive_tbl_idx_a1 on idx_dive_tbl(a1);
create index idx_dive_tbl_idx_a2 on idx_dive_tbl(a2);
create index idx_dive_tbl_idx_a3 on idx_dive_tbl(a3);
create index idx_dive_tbl_idx_a4 on idx_dive_tbl(a4);
create index idx_dive_tbl_idx_a5 on idx_dive_tbl(a5);
create index idx_dive_tbl_idx_a6 on idx_dive_tbl(a6);
create index idx_dive_tbl_idx_a7 on idx_dive_tbl(a7);
create index idx_dive_tbl_idx_a8 on idx_dive_tbl(a8);
create index idx_dive_tbl_idx_a9 on idx_dive_tbl(a9);
create index idx_dive_tbl_idx_a10 on idx_dive_tbl(a10);
set optimizer_trace_max_mem_size=1048576;
SET end_markers_in_json=off;
flush sql_statistics;
Case 19.1: eq_range_index_dive_limit=10
SET eq_range_index_dive_limit=10;
SET optimizer_trace="enabled=on,one_line=off";
set global sql_stats_control=ON;
set @trace_count = 0;
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80)
and idx_dive_tbl.a9  in (10, 20, 30, 40, 50, 60, 70, 80, 90)
and idx_dive_tbl.a10 in (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
count(*)
0
select round(length(trace)-
length(replace(trace, "\"index_dives_for_eq_ranges\": true", "")))
/length("\"index_dives_for_eq_ranges\": true") into @trace_count
from information_schema.optimizer_trace;
set global sql_stats_control=OFF_SOFT;
SET optimizer_trace="enabled=off";
select sql_text, index_dive_count,
cast(@trace_count as UNSIGNED) as indexes_accessed_for_dive,
case
when index_dive_count = 45 then "Success"
            else "Fail"
       end as test_status,
case
when index_dive_cpu > 0 then "populated"
           else "not populated"
       end index_dive_cpu,
case
when compilation_cpu > 0 then "populated"
           else "not populated"
       end compilation_cpu
from (select concat(substring(sql_text, 1, 23), "...") as sql_text,
index_dive_count, index_dive_cpu, compilation_cpu
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id
and sql_text not like 'SET%'
           and sql_text not like '%round%') v;
sql_text	index_dive_count	indexes_accessed_for_dive	test_status	index_dive_cpu	compilation_cpu
SELECT COUNT ( * ) FROM...	45	9	Success	populated	populated
flush sql_statistics;
Case 19.2: eq_range_index_dive_limit=5
SET eq_range_index_dive_limit=5;
SET optimizer_trace="enabled=on,one_line=off";
set global sql_stats_control=ON;
set @trace_count = 0;
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80)
and idx_dive_tbl.a9  in (10, 20, 30, 40, 50, 60, 70, 80, 90)
and idx_dive_tbl.a10 in (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
count(*)
0
select round(length(trace)-
length(replace(trace, "\"index_dives_for_eq_ranges\": true", "")))
/length("\"index_dives_for_eq_ranges\": true") into @trace_count
from information_schema.optimizer_trace;
set global sql_stats_control=OFF_SOFT;
SET optimizer_trace="enabled=off";
select sql_text, index_dive_count,
cast(@trace_count as UNSIGNED) as indexes_accessed_for_dive,
case
when index_dive_count = 10 then "Success"
            else "Fail"
       end as test_status,
case
when index_dive_cpu > 0 then "populated"
           else "not populated"
       end index_dive_cpu,
case
when compilation_cpu > 0 then "populated"
           else "not populated"
       end compilation_cpu
from (select concat(substring(sql_text, 1, 23), "...") as sql_text,
index_dive_count, index_dive_cpu, compilation_cpu
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id
and sql_text not like 'SET%'
           and sql_text not like '%round%') v;
sql_text	index_dive_count	indexes_accessed_for_dive	test_status	index_dive_cpu	compilation_cpu
SELECT COUNT ( * ) FROM...	10	4	Success	populated	populated
flush sql_statistics;
Case 19.3: eq_range_index_dive_limit=11
SET eq_range_index_dive_limit=11;
SET optimizer_trace="enabled=on,one_line=off";
set global sql_stats_control=ON;
set @trace_count = 0;
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80)
and idx_dive_tbl.a9  in (10, 20, 30, 40, 50, 60, 70, 80, 90)
and idx_dive_tbl.a10 in (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
count(*)
0
select round(length(trace)-
length(replace(trace, "\"index_dives_for_eq_ranges\": true", "")))
/length("\"index_dives_for_eq_ranges\": true") into @trace_count
from information_schema.optimizer_trace;
set global sql_stats_control=OFF_SOFT;
SET optimizer_trace="enabled=off";
select sql_text, index_dive_count,
cast(@trace_count as UNSIGNED) as indexes_accessed_for_dive,
case
when index_dive_count = 55 then "Success"
            else "Fail"
       end as test_status,
case
when index_dive_cpu > 0 then "populated"
           else "not populated"
       end index_dive_cpu,
case
when compilation_cpu > 0 then "populated"
           else "not populated"
       end compilation_cpu
from (select concat(substring(sql_text, 1, 23), "...") as sql_text,
index_dive_count, index_dive_cpu, compilation_cpu
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id
and sql_text not like 'SET%'
           and sql_text not like '%round%') v;
sql_text	index_dive_count	indexes_accessed_for_dive	test_status	index_dive_cpu	compilation_cpu
SELECT COUNT ( * ) FROM...	55	10	Success	populated	populated
flush sql_statistics;
Case 19.4: eq_range_index_dive_limit=2
SET eq_range_index_dive_limit=2;
SET optimizer_trace="enabled=on,one_line=off";
set global sql_stats_control=ON;
set @trace_count = 0;
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80)
and idx_dive_tbl.a9  in (10, 20, 30, 40, 50, 60, 70, 80, 90)
and idx_dive_tbl.a10 in (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
count(*)
0
select round(length(trace)-
length(replace(trace, "\"index_dives_for_eq_ranges\": true", "")))
/length("\"index_dives_for_eq_ranges\": true") into @trace_count
from information_schema.optimizer_trace;
set global sql_stats_control=OFF_SOFT;
SET optimizer_trace="enabled=off";
select sql_text, index_dive_count,
cast(@trace_count as UNSIGNED) as indexes_accessed_for_dive,
case
when index_dive_count = 1 then "Success"
            else "Fail"
       end as test_status,
case
when index_dive_cpu > 0 then "populated"
           else "not populated"
       end index_dive_cpu,
case
when compilation_cpu > 0 then "populated"
           else "not populated"
       end compilation_cpu
from (select concat(substring(sql_text, 1, 23), "...") as sql_text,
index_dive_count, index_dive_cpu, compilation_cpu
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id
and sql_text not like 'SET%'
           and sql_text not like '%round%') v;
sql_text	index_dive_count	indexes_accessed_for_dive	test_status	index_dive_cpu	compilation_cpu
SELECT COUNT ( * ) FROM...	1	1	Success	populated	populated
flush sql_statistics;
Case 19.5: eq_range_index_dive_limit=7
SET eq_range_index_dive_limit=7;
SET optimizer_trace="enabled=on,one_line=off";
set global sql_stats_control=ON;
set @trace_count = 0;
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80)
and idx_dive_tbl.a9  in (10, 20, 30, 40, 50, 60, 70, 80, 90)
and idx_dive_tbl.a10 in (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
count(*)
0
select round(length(trace)-
length(replace(trace, "\"index_dives_for_eq_ranges\": true", "")))
/length("\"index_dives_for_eq_ranges\": true") into @trace_count
from information_schema.optimizer_trace;
set global sql_stats_control=OFF_SOFT;
SET optimizer_trace="enabled=off";
select sql_text, index_dive_count,
cast(@trace_count as UNSIGNED) as indexes_accessed_for_dive,
case
when index_dive_count = 21 then "Success"
            else "Fail"
       end as test_status,
case
when index_dive_cpu > 0 then "populated"
           else "not populated"
       end index_dive_cpu,
case
when compilation_cpu > 0 then "populated"
           else "not populated"
       end compilation_cpu
from (select concat(substring(sql_text, 1, 23), "...") as sql_text,
index_dive_count, index_dive_cpu, compilation_cpu
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id
and sql_text not like 'SET%'
           and sql_text not like '%round%') v;
sql_text	index_dive_count	indexes_accessed_for_dive	test_status	index_dive_cpu	compilation_cpu
SELECT COUNT ( * ) FROM...	21	6	Success	populated	populated
flush sql_statistics;
Case 19.6: eq_range_index_dive_limit=11
SET eq_range_index_dive_limit=11;
set global sql_stats_control=ON;
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80)
and idx_dive_tbl.a9  in (10, 20, 30, 40, 50, 60, 70, 80, 90);
select count(*)
from idx_dive_tbl
where idx_dive_tbl.a1  in (10)
and idx_dive_tbl.a2  in (10, 20)
and idx_dive_tbl.a3  in (10, 20, 30)
and idx_dive_tbl.a4  in (10, 20, 30, 40)
and idx_dive_tbl.a5  in (10, 20, 30, 40, 50)
and idx_dive_tbl.a6  in (10, 20, 30, 40, 50, 60)
and idx_dive_tbl.a7  in (10, 20, 30, 40, 50, 60, 70)
and idx_dive_tbl.a8  in (10, 20, 30, 40, 50, 60, 70, 80)
and idx_dive_tbl.a9  in (10, 20, 30, 40, 50, 60, 70, 80, 90)
and idx_dive_tbl.a10 in (10, 20, 30, 40, 50, 60, 70, 80, 90, 100);
||||
count(*)
1
count(*)
0
count(*)
0
count(*)
0
count(*)
0
count(*)
0
count(*)
0
count(*)
0
count(*)
0
count(*)
0
select concat(substring(sql_text, 1, 23), "...") as sql_text,
length(sql_text) sql_text_len,
index_dive_count,
case
when index_dive_cpu > 0 then "populated"
           else "not populated"
       end index_dive_cpu,
case
when compilation_cpu > 0 then "populated"
           else "not populated"
       end compilation_cpu
from information_schema.sql_statistics s, information_schema.sql_text t
where s.sql_id = t.sql_id
order by 1,2,3,4||||
sql_text	sql_text_len	index_dive_count	index_dive_cpu	compilation_cpu
SELECT COUNT ( * ) FROM...	74	1	populated	populated
SELECT COUNT ( * ) FROM...	109	3	populated	populated
SELECT COUNT ( * ) FROM...	144	6	populated	populated
SELECT COUNT ( * ) FROM...	179	10	populated	populated
SELECT COUNT ( * ) FROM...	214	15	populated	populated
SELECT COUNT ( * ) FROM...	249	21	populated	populated
SELECT COUNT ( * ) FROM...	284	28	populated	populated
SELECT COUNT ( * ) FROM...	319	36	populated	populated
SELECT COUNT ( * ) FROM...	354	45	populated	populated
SELECT COUNT ( * ) FROM...	390	55	populated	populated
drop table idx_dive_tbl;
drop procedure populate;
Cleanup
set @@GLOBAL.sql_stats_control="OFF_HARD";
set @@GLOBAL.sql_plans_control=OFF_HARD;
set @@GLOBAL.max_digest_sample_age=-1;
drop table t1;
drop user user_super@localhost;
