SET optimizer_low_limit_heuristic = 1;
# Test that the query does not use the low_limit heuristic when 
# the optimizer_low_limit_heuristic system variable is FALSE.
CREATE TABLE t1 (
pk INT PRIMARY KEY AUTO_INCREMENT,
i INT,
j INT,
INDEX (i),
INDEX (j)
);
INSERT INTO t1 (i,j) VALUES (1,1);
SET @d=1;
INSERT INTO t1 (i,j) SELECT i+@d, j+@d from t1;
SET @d=@d*2;
INSERT INTO t1 (i,j) SELECT i+@d, j+@d from t1;
SET @d=@d*2;
INSERT INTO t1 (i,j) SELECT i+@d, j+@d from t1;
SET @d=@d*2;
INSERT INTO t1 (i,j) SELECT i+@d, j+@d from t1;
SET @d=@d*2;
INSERT INTO t1 (i,j) SELECT i+@d, j+@d from t1;
SET @d=@d*2;
INSERT INTO t1 (i,j) SELECT i+@d, j+@d from t1;
SET @d=@d*2;
INSERT INTO t1 (i,j) SELECT i+@d, j+@d from t1;
SET @d=@d*2;
ANALYZE TABLE t1;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
SELECT @@optimizer_low_limit_heuristic;
@@optimizer_low_limit_heuristic
1
EXPLAIN SELECT * FROM t1
WHERE i<100 AND j<10
ORDER BY i LIMIT 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	i,j	i	5	NULL	77	Using index condition; Using where
SET optimizer_low_limit_heuristic = 0;
SELECT @@optimizer_low_limit_heuristic;
@@optimizer_low_limit_heuristic
0
EXPLAIN SELECT * FROM t1
WHERE i<100 AND j<10
ORDER BY i LIMIT 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	i,j	j	5	NULL	6	Using index condition; Using where; Using filesort
SET optimizer_low_limit_heuristic = 1;
SELECT @@optimizer_low_limit_heuristic;
@@optimizer_low_limit_heuristic
1
DROP TABLE t1;
CREATE TABLE t0 (
i0 INTEGER NOT NULL
);
INSERT INTO t0 VALUES (0),(1),(2),(3),(4),(5),(6),(7),(8),(9);
CREATE TABLE t1 (
pk INTEGER PRIMARY KEY,
i1 INTEGER NOT NULL,
i2 INTEGER NOT NULL,
INDEX k1 (i1),
INDEX k2 (i1,i2)
) ENGINE=InnoDB;
INSERT INTO t1
SELECT a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0,
a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0,
a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0
FROM t0 AS a0, t0 AS a1;
CREATE TABLE t2 (
pk INTEGER PRIMARY KEY,
i1 INTEGER NOT NULL,
INDEX k1 (i1)
) ENGINE=InnoDB;
INSERT INTO t2
SELECT a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0,
a0.i0 + 10*a1.i0 + 100*a0.i0 + 1000*a1.i0
FROM t0 AS a0, t0 AS a1;
ANALYZE TABLE t1,t2;
Table	Op	Msg_type	Msg_text
test.t1	analyze	status	OK
test.t2	analyze	status	OK
# Query 1
# Query should use index to optimize the ORDER BY LIMIT
select @@optimizer_low_limit_heuristic;
@@optimizer_low_limit_heuristic
1
EXPLAIN SELECT * FROM t1 STRAIGHT_JOIN t2 ON t1.i1=t2.i1
WHERE t1.pk > 7000 and t1.i1 > 2
ORDER BY t1.i1 LIMIT 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	PRIMARY,k1,k2	k2	4	NULL	99	Using where; Using index
1	SIMPLE	t2	ref	k1	k1	4	test.t1.i1	1	Using index
SET optimizer_low_limit_heuristic = 0;
SELECT @@optimizer_low_limit_heuristic;
@@optimizer_low_limit_heuristic
0
EXPLAIN SELECT * FROM t1 STRAIGHT_JOIN t2 ON t1.i1=t2.i1
WHERE t1.pk > 7000 and t1.i1 > 2
ORDER BY t1.i1 LIMIT 2;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	PRIMARY,k1,k2	PRIMARY	4	NULL	30	Using where; Using filesort
1	SIMPLE	t2	ref	k1	k1	4	test.t1.i1	1	Using index
SET optimizer_low_limit_heuristic = 1;
SELECT @@optimizer_low_limit_heuristic;
@@optimizer_low_limit_heuristic
1
# Query 2
# Query should use index to optimize the ORDER BY LIMIT
EXPLAIN SELECT * FROM t1 STRAIGHT_JOIN t2 ON t1.i1=t2.i1
WHERE t1.pk > 7000 and t1.i1 > 2
ORDER BY t1.i1 LIMIT 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	PRIMARY,k1,k2	k2	4	NULL	99	Using where; Using index
1	SIMPLE	t2	ref	k1	k1	4	test.t1.i1	1	Using index
SET optimizer_low_limit_heuristic = 0;
SELECT @@optimizer_low_limit_heuristic;
@@optimizer_low_limit_heuristic
0
EXPLAIN SELECT * FROM t1 STRAIGHT_JOIN t2 ON t1.i1=t2.i1
WHERE t1.pk > 7000 and t1.i1 > 2
ORDER BY t1.i1 LIMIT 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	PRIMARY,k1,k2	PRIMARY	4	NULL	30	Using where; Using filesort
1	SIMPLE	t2	ref	k1	k1	4	test.t1.i1	1	Using index
SET optimizer_low_limit_heuristic = 1;
SELECT @@optimizer_low_limit_heuristic;
@@optimizer_low_limit_heuristic
1
# Query 3
# Changing range condition on i1 should make
# key on i1 get picked to give the order.
# Unaffected by system variable.
EXPLAIN SELECT * FROM t1 STRAIGHT_JOIN t2 ON t1.i1=t2.i1
WHERE t1.pk > 7000 and t1.i1 > 800
ORDER BY t1.i1 LIMIT 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	PRIMARY,k1,k2	k2	4	NULL	92	Using where; Using index
1	SIMPLE	t2	ref	k1	k1	4	test.t1.i1	1	Using index
SET optimizer_low_limit_heuristic = 0;
SELECT @@optimizer_low_limit_heuristic;
@@optimizer_low_limit_heuristic
0
EXPLAIN SELECT * FROM t1 STRAIGHT_JOIN t2 ON t1.i1=t2.i1
WHERE t1.pk > 7000 and t1.i1 > 800
ORDER BY t1.i1 LIMIT 5;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	PRIMARY,k1,k2	PRIMARY	4	NULL	30	Using where; Using filesort
1	SIMPLE	t2	ref	k1	k1	4	test.t1.i1	1	Using index
SET optimizer_low_limit_heuristic = 1;
SELECT @@optimizer_low_limit_heuristic;
@@optimizer_low_limit_heuristic
1
SET optimizer_low_limit_heuristic = 1;
SELECT @@optimizer_low_limit_heuristic;
@@optimizer_low_limit_heuristic
1
EXPLAIN SELECT i1 FROM t1 where pk > 0 and pk < 10000 order by i1 limit 1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	index	PRIMARY	k1	4	NULL	1	Using where; Using index
SET optimizer_low_limit_heuristic = 0;
SELECT @@optimizer_low_limit_heuristic;
@@optimizer_low_limit_heuristic
0
EXPLAIN SELECT i1 FROM t1 where pk > 0 and pk < 10000 order by i1 limit 1;
id	select_type	table	type	possible_keys	key	key_len	ref	rows	Extra
1	SIMPLE	t1	range	PRIMARY	PRIMARY	4	NULL	98	Using where; Using filesort
DROP TABLE t0, t1, t2;
SET @@optimizer_low_limit_heuristic = 1;
