DROP TABLE IF EXISTS ColumnStatisticsRecursion;
DROP DATABASE IF EXISTS cus_test;
CREATE DATABASE cus_test;
USE cus_test;
# Setting up environment
CREATE TABLE ColumnStatisticsRecursion (
c0 INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
c1 INT(6) UNSIGNED,
c2 INT(6) UNSIGNED,
c3 INT(6) UNSIGNED,
c4 INT(6) UNSIGNED,
c5 INT(6) UNSIGNED,
c6 INT(6) UNSIGNED,
c7 INT(6) UNSIGNED,
c8 INT(6) UNSIGNED,
c9 INT(6) UNSIGNED,
c10 INT(6) UNSIGNED,
c11 INT(6) UNSIGNED,
c12 INT(6) UNSIGNED,
c13 INT(6) UNSIGNED,
c14 INT(6) UNSIGNED,
c15 INT(6) UNSIGNED
);
INSERT INTO ColumnStatisticsRecursion
(c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, c10, c11, c12, c13, c14, c15)
VALUES
(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
set global column_stats_control = ON;
SET SESSION DEBUG="+d,crash_excessive_recursion_column_stats";
# Control setup: No crash
SELECT c0 FROM ColumnStatisticsRecursion
WHERE (c0 = 0 AND
(c1 = 0 OR
(c2 = 0 AND
(c3 = 0 OR
(c4 = 0 AND
(c5 = 0 OR
(c6 = 0 AND
(c7 = 0 OR
(c8 = 0 AND
(c9 = 0 OR
(c10 = 0 AND
(c11 = 0 OR
(c12 = 0 AND
(c13 = 0 OR
(c14 = 0
)))))))))))))));
c0
# Control setup: Results
SELECT COUNT(DISTINCT SQL_ID) FROM information_schema.COLUMN_STATISTICS;
COUNT(DISTINCT SQL_ID)
1
SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, SQL_OPERATION, OPERATOR_TYPE
FROM information_schema.COLUMN_STATISTICS;
TABLE_SCHEMA	TABLE_NAME	COLUMN_NAME	SQL_OPERATION	OPERATOR_TYPE
cus_test	ColumnStatisticsRecursion	c0	FILTER	EQUAL
cus_test	ColumnStatisticsRecursion	c1	FILTER	EQUAL
cus_test	ColumnStatisticsRecursion	c10	FILTER	EQUAL
cus_test	ColumnStatisticsRecursion	c11	FILTER	EQUAL
cus_test	ColumnStatisticsRecursion	c12	FILTER	EQUAL
cus_test	ColumnStatisticsRecursion	c13	FILTER	EQUAL
cus_test	ColumnStatisticsRecursion	c14	FILTER	EQUAL
cus_test	ColumnStatisticsRecursion	c2	FILTER	EQUAL
cus_test	ColumnStatisticsRecursion	c3	FILTER	EQUAL
cus_test	ColumnStatisticsRecursion	c4	FILTER	EQUAL
cus_test	ColumnStatisticsRecursion	c5	FILTER	EQUAL
cus_test	ColumnStatisticsRecursion	c6	FILTER	EQUAL
cus_test	ColumnStatisticsRecursion	c7	FILTER	EQUAL
cus_test	ColumnStatisticsRecursion	c8	FILTER	EQUAL
cus_test	ColumnStatisticsRecursion	c9	FILTER	EQUAL
# Test setup: Preparing for crash
SELECT c0 FROM ColumnStatisticsRecursion
WHERE (c0 = 0 AND
(c1 = 0 OR
(c2 = 0 AND
(c3 = 0 OR
(c4 = 0 AND
(c5 = 0 OR
(c6 = 0 AND
(c7 = 0 OR
(c8 = 0 AND
(c9 = 0 OR
(c10 = 0 AND
(c11 = 0 OR
(c12 = 0 AND
(c13 = 0 OR
(c14 = 0 AND
(c15 = 0
))))))))))))))));
ERROR HY000: Lost connection to MySQL server during query
# Restart the master server
# Environment cleanup
USE cus_test;
SELECT COUNT(DISTINCT SQL_ID) FROM information_schema.COLUMN_STATISTICS;
COUNT(DISTINCT SQL_ID)
0
SELECT TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, SQL_OPERATION, OPERATOR_TYPE
FROM information_schema.COLUMN_STATISTICS;
TABLE_SCHEMA	TABLE_NAME	COLUMN_NAME	SQL_OPERATION	OPERATOR_TYPE
set global column_stats_control = OFF_HARD;
DROP TABLE ColumnStatisticsRecursion;
DROP DATABASE cus_test;
