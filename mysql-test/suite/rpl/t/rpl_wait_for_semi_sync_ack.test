source include/have_debug_sync.inc;
let $rpl_topology= 1->2,1->3;
source include/rpl_init.inc;

let $rpl_connection_name= master;
let $rpl_server_number= 1;
source include/rpl_connect.inc;

let $rpl_connection_name= master1;
let $rpl_server_number= 1;
source include/rpl_connect.inc;

let $rpl_connection_name= async_slave;
let $rpl_server_number= 2;
source include/rpl_connect.inc;

let $rpl_connection_name= semi_sync_slave;
let $rpl_server_number= 3;
source include/rpl_connect.inc;

# Use gtids in sync_slave_sql_with_master.inc
let $use_gtids= 1;

connection master;
call mtr.add_suppression("Error while waiting for semi-sync ACK on dump thread");
call mtr.add_suppression("Slave SQL: Request to stop slave SQL Thread received");

# Use COM_BINLOG_DUMP_GTID
connection semi_sync_slave;
source include/stop_slave.inc;
change master to master_auto_position = 1;
source include/start_slave.inc;

connection async_slave;
source include/stop_slave.inc;
change master to master_auto_position = 1;
source include/start_slave.inc;


# Case 1: Master should wait for ACK before sending events to async slave

connection master;
create table t1(a int);
let $sync_slave_connection= async_slave;
source include/sync_slave_sql_with_master.inc;
connection master;
let $sync_slave_connection= semi_sync_slave;
source include/sync_slave_sql_with_master.inc;

connection semi_sync_slave;
set @@global.debug= '+d,before_semi_sync_reply';

connection master;
echo "Store the current cursor for and async slave";
let $async_cur= `select info from information_schema.processlist where command like 'Binlog%' and info like 'Async%'`;
echo "Store the last acked pos";
let $last_acked= `show status like 'Rpl_last_semi_sync_acked_pos'`;
begin;
insert into t1 values(1);
insert into t1 values(2);
insert into t1 values(3);
send commit;

connection semi_sync_slave;
SET DEBUG_SYNC='now WAIT_FOR reached';

connection async_slave;
echo "Async Slave: t1 should not contain any rows";
select count(*) from t1;

connection master1;
echo "Async slave's cursor should not move";
let $async_cur2= `select info from information_schema.processlist where command like 'Binlog%' and info like 'Async%'`;
let $assert_text= Async slave cursor should not move;
let $assert_cond= "$async_cur" = "$async_cur2";
source include/assert.inc;

echo "Last acked pos should not move";
let $last_acked2= `show status like 'Rpl_last_semi_sync_acked_pos'`;
let $assert_text= Last acked pos should not move;
let $assert_cond= "$last_acked" = "$last_acked2";
source include/assert.inc;

connection semi_sync_slave;
SET DEBUG_SYNC='now SIGNAL continue';
set @@global.debug= '-d,before_semi_sync_reply';

connection master;
reap;
echo "Master: t1 should contain three rows";
select count(*) from t1;

let $sync_slave_connection= async_slave;
source include/sync_slave_sql_with_master.inc;

connection async_slave;
echo "Async Slave: t1 should contain three rows now that trx is ACKed";
select count(*) from t1;


# Case 2: The dump thread should be killable when waiting for an ack

connection semi_sync_slave;
set @@global.debug= '+d,before_semi_sync_reply';

connection master;
send create table t2(a int);

connection semi_sync_slave;
SET DEBUG_SYNC='now WAIT_FOR reached';

connection master1;
let $wait_condition= select count(*)= 1 from information_schema.processlist where state like '%Waiting for an ACK from semi-sync ACKers%';
source include/wait_condition.inc;

echo "Killing thread";
let $id= `select id from information_schema.processlist where state like '%Waiting for an ACK from semi-sync ACKers%'`;
replace_result $id id;
eval kill $id;

let $wait_condition= select count(*)= 0 from information_schema.processlist where id= $id;
source include/wait_condition.inc;

echo "Waiting for async slave to reconnect";
let $wait_condition= select count(*)= 2 from information_schema.processlist where command like '%Binlog Dump%';
source include/wait_condition.inc;

echo "t2 should not be present in async slave";
connection async_slave;
show tables;

connection semi_sync_slave;
SET DEBUG_SYNC='now SIGNAL continue';
set @@global.debug= '-d,before_semi_sync_reply';

echo "Tables on master";
connection master;
reap;
show tables;

echo "Waiting for both slaves to catchup";
connection master;
let $sync_slave_connection= async_slave;
source include/sync_slave_sql_with_master.inc;
connection master;
let $sync_slave_connection= semi_sync_slave;
source include/sync_slave_sql_with_master.inc;
connection async_slave;
show tables;
connection semi_sync_slave;
show tables;


# Case 3: Dump thread should stop waiting if either rpl_semi_sync_master_enabled or rpl_wait_for_semi_sync_ack is disabled

connection semi_sync_slave;
set @@global.debug= '+d,before_semi_sync_reply';

# Disabling rpl_semi_sync_master_enabled
connection master;
send create table t3(a int);

connection semi_sync_slave;
SET DEBUG_SYNC='now WAIT_FOR reached';

connection master1;
let $wait_condition= select count(*)= 1 from information_schema.processlist where state like '%Waiting for an ACK from semi-sync ACKers%';
source include/wait_condition.inc;

echo "Switching off rpl_semi_sync_master_enabled while async thread is waiting for ack";
set @@global.rpl_semi_sync_master_enabled = 0;

echo "Waiting till async slave is caught up";
let $sync_slave_connection= async_slave;
source include/sync_slave_sql_with_master.inc;
connection async_slave;
show tables;

connection semi_sync_slave;
SET DEBUG_SYNC='now SIGNAL continue';

echo "Switching rpl_semi_sync_master_enabled back on";
connection master;
reap;
set @@global.rpl_semi_sync_master_enabled = 1;

connection semi_sync_slave;
source include/stop_slave.inc;
source include/start_slave.inc;

connection master;
echo "Waiting till semi-sync slave is caught up";
let $sync_slave_connection= semi_sync_slave;
source include/sync_slave_sql_with_master.inc;
connection semi_sync_slave;
show tables;

# Disabling rpl_wait_for_semi_sync_ack

connection master;
send create table t4(a int);

connection semi_sync_slave;
SET DEBUG_SYNC='now WAIT_FOR reached';

connection master1;
let $wait_condition= select count(*)= 1 from information_schema.processlist where state like '%Waiting for an ACK from semi-sync ACKers%';
source include/wait_condition.inc;

echo "Switching off rpl_wait_for_semi_sync_ack while async thread is waiting for ack";
set @@global.rpl_wait_for_semi_sync_ack = 0;

echo "Waiting till async slave is caught up";
let $sync_slave_connection= async_slave;
source include/sync_slave_sql_with_master.inc;
connection async_slave;
show tables;

connection semi_sync_slave;
SET DEBUG_SYNC='now SIGNAL continue';
set @@global.debug= '-d,before_semi_sync_reply';

echo "Switching rpl_wait_for_semi_sync_ack back on";
connection master;
reap;
set @@global.rpl_wait_for_semi_sync_ack = 1;

connection master;
echo "Waiting till semi-sync slave is caught up";
let $sync_slave_connection= semi_sync_slave;
source include/sync_slave_sql_with_master.inc;
connection semi_sync_slave;
show tables;


# Case 4: Lagging async slave + master restart

echo "Stopping async slave to simulate lag";
connection async_slave;
source include/stop_slave.inc;

echo "Generating traffic on the master";
connection master;
create table t5(a int);
insert into t5 values(1);
insert into t5 values(2);
flush logs;
insert into t5 values(3);
insert into t5 values(4);
flush logs;

let $sync_slave_connection= semi_sync_slave;
source include/sync_slave_sql_with_master.inc;

connection master;
echo "Restarting master";
let $rpl_server_number=1;
source include/rpl_restart_server.inc;

echo "Starting async slave";
connection async_slave;
source include/start_slave.inc;

echo "Waiting till async slave is caught up";
connection master;
let $sync_slave_connection= async_slave;
source include/sync_slave_sql_with_master.inc;


# Case 5: Should wait for ACK after RESET MASTER

connection semi_sync_slave;
source include/stop_slave.inc;
connection async_slave;
source include/stop_slave.inc;
connection master;
set @gtid_exec= @@global.gtid_executed;
reset master;
echo "Last acked pos should be empty";
show status like 'Rpl_last_semi_sync_acked_pos';
set @@global.gtid_purged= @gtid_exec;
let $binlog= query_get_value(SHOW MASTER STATUS, File, 1);
replace_result $binlog binlog;
eval purge binary logs to '$binlog';

connection semi_sync_slave;
source include/start_slave.inc;
connection async_slave;
source include/start_slave.inc;

connection semi_sync_slave;
set @@global.debug= '+d,before_semi_sync_reply';

connection master;
send create table t6 (a int);

connection semi_sync_slave;
SET DEBUG_SYNC='now WAIT_FOR reached';

connection async_slave;
echo "Async Slave: Should not contain t6";
show tables;

connection semi_sync_slave;
SET DEBUG_SYNC='now SIGNAL continue';
set @@global.debug= '-d,before_semi_sync_reply';

connection master;
reap;
echo "Master: Should contain t6";
show tables;

let $sync_slave_connection= async_slave;
source include/sync_slave_sql_with_master.inc;

connection async_slave;
echo "Async Slave: Should contain t6";
show tables;


# Cleanup

connection master;
drop table t1;
drop table t2;
drop table t3;
drop table t4;
drop table t5;
drop table t6;

connection master;
let $sync_slave_connection= async_slave;
source include/sync_slave_sql_with_master.inc;
connection master;
let $sync_slave_connection= semi_sync_slave;
source include/sync_slave_sql_with_master.inc;


source include/rpl_end.inc;
