--source include/master-slave.inc
--source include/have_binlog_format_row.inc
--source include/have_debug.inc
--source include/not_parallel.inc

# Cleanup old binlog
connection master;
flush logs;
let $binlog= query_get_value(SHOW MASTER STATUS, File, 1);
replace_result $binlog binlog;
eval purge binary logs to '$binlog';

connection slave;
flush logs;
let $binlog= query_get_value(SHOW MASTER STATUS, File, 1);
replace_result $binlog binlog;
eval purge binary logs to '$binlog';

# Set minimum_hlc_ns to a high value. Subsequent txn's should see monotonically
# increasing timestamp from this point
connection master;
SET SESSION DEBUG="+d,allow_long_hlc_drift_for_tests";
SET @@global.minimum_hlc_ns = 2538630000000000000; # ~2050 AD

# Enable binlog_hlc in both master and slave
SET @@session.allow_noncurrent_db_rw = OFF;
SET @@session.response_attrs_contain_hlc = true;
SET @@session.enable_block_stale_hlc_read = true;
SET @@global.enable_binlog_hlc = true;
SET @@global.maintain_database_hlc = true;

connection slave;
SET @@session.allow_noncurrent_db_rw = OFF;
SET @@session.response_attrs_contain_hlc = true;
SET @@session.enable_block_stale_hlc_read = true;
SET @@global.enable_binlog_hlc = true;
SET @@global.maintain_database_hlc = true;

# Construct several databases for testing purposes
connection master;
CREATE DATABASE a;
USE a;
CREATE TABLE ta (a INT PRIMARY KEY, b CHAR(8)) ENGINE=InnoDB;
INSERT INTO ta (a, b) VALUES (1, 'foo');

CREATE DATABASE b;
USE b;
CREATE TABLE tb (a INT PRIMARY KEY, b CHAR(8)) ENGINE=InnoDB;
INSERT INTO tb (a, b) VALUES (2, 'bar');

CREATE DATABASE c;
USE c;
CREATE TABLE tc (a INT PRIMARY KEY, b CHAR(8)) ENGINE=InnoDB;

--source include/sync_slave_sql_with_master.inc

# =============================================================================
# Simple case for basic single database read
# =============================================================================
connection master;
--echo Perform a single write to get an HLC timstamp from the write
USE a;
BEGIN;
INSERT INTO ta (a, b) VALUES (3, 'baz');
COMMIT;
let $hlc = get_response_attribute hlc_ts;
--echo HLC: $hlc

# Wait for the slave to catch up
--source include/sync_slave_sql_with_master.inc

# Now perform a successful read conditioned on this HLC, should pass
connection slave;
USE a;
query_attrs_add hlc_ts_lower_bound $hlc;
SELECT * FROM ta;
query_attrs_reset;

# Stop the slave so it won't receive the next write
--source include/stop_slave.inc

connection master;
--echo Perform another write
USE a;
BEGIN;
INSERT INTO ta (a, b) VALUES (4, 'bah');
COMMIT;
let $hlc = get_response_attribute hlc_ts;
--echo HLC: $hlc

# Now perform a read that should fail since the binlog hasn't applied to the slave
connection slave;
USE a;
query_attrs_add hlc_ts_lower_bound $hlc;
--error ER_STALE_HLC_READ
SELECT * FROM ta;

# Check more reads against the information_schema and mysql tables, these should not fail
SELECT * FROM mysql.slow_log;
SELECT * FROM information_schema.database_applied_hlc;
query_attrs_reset;

# Restart replication and re-sync for later tests
--source include/start_slave.inc
--source include/sync_slave_sql_with_master.inc

# =============================================================================
# Handle an attempt to set a timestamp for a read inside of a transaction
# =============================================================================

# Start a txn that a read will occur within
connection slave;
USE a;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;
BEGIN;
query_attrs_add hlc_ts_lower_bound $hlc;
--error ER_HLC_READ_BOUND_IN_TRANSACTION
SELECT * FROM ta;
query_attrs_reset;
COMMIT;

SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
BEGIN;
query_attrs_add hlc_ts_lower_bound $hlc;
--error ER_HLC_READ_BOUND_IN_TRANSACTION
SELECT * FROM ta;
query_attrs_reset;
COMMIT;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;
BEGIN;
query_attrs_add hlc_ts_lower_bound $hlc;
--error ER_HLC_READ_BOUND_IN_TRANSACTION
SELECT * FROM ta;
query_attrs_reset;
COMMIT;

SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED;
BEGIN;
query_attrs_add hlc_ts_lower_bound $hlc;
--error ER_HLC_READ_BOUND_IN_TRANSACTION
SELECT * FROM ta;
query_attrs_reset;
COMMIT;

# =============================================================================
# Check the auto-commit case
# =============================================================================

connection slave;
USE a;

SET autocommit = 0;

# This read passes since it's starting a txn
query_attrs_add hlc_ts_lower_bound $hlc;
SELECT * FROM ta;
query_attrs_reset;

# This read fails since a txn has already started
query_attrs_add hlc_ts_lower_bound $hlc;
--error ER_HLC_READ_BOUND_IN_TRANSACTION
SELECT * FROM ta;
query_attrs_reset;

# Close transaction and drop MDL locks
COMMIT;

SET autocommit = 1;

# =============================================================================
# Check the case where the database changing part way through a connection
# =============================================================================

# Perform a write to a table in database C
connection master;
USE c;

BEGIN;
INSERT INTO tc (a, b) VALUES (1, 'bar');
COMMIT;
let $hlc = get_response_attribute hlc_ts;
--echo HLC: $hlc

# Wait for the slave to catch up
--source include/sync_slave_sql_with_master.inc

connection slave;
USE c;
query_attrs_add hlc_ts_lower_bound $hlc;
SELECT * FROM tc;
query_attrs_reset;

# =============================================================================
# Verify that writes to multiple databases are correctly handled
# =============================================================================
connection master;

USE b;
BEGIN;
INSERT INTO tb (a, b) VALUES (6, 'baz');
COMMIT;
let $hlc_b = get_response_attribute hlc_ts;

USE c;
BEGIN;
INSERT INTO tc (a, b) VALUES (6, 'baz');
COMMIT;
let $hlc_c = get_response_attribute hlc_ts;

# Wait for the slave to catch up
--source include/sync_slave_sql_with_master.inc

connection slave;

# Stop the slave in the event the heartbeats eventually implement advancing the clock
--source include/stop_slave.inc

USE b;
query_attrs_add hlc_ts_lower_bound $hlc_b;
SELECT * FROM tb;
query_attrs_reset;

query_attrs_add hlc_ts_lower_bound $hlc_c;
--error ER_STALE_HLC_READ
SELECT * FROM tb;
query_attrs_reset;

USE c;
query_attrs_add hlc_ts_lower_bound $hlc_b;
SELECT * FROM tc;
query_attrs_reset;

query_attrs_add hlc_ts_lower_bound $hlc_c;
SELECT * FROM tc;
query_attrs_reset;

--source include/start_slave.inc

# =============================================================================
# Verify that allow_noncurrent_db_rw is validated
# =============================================================================

connection slave;
USE a;

SET @@session.allow_noncurrent_db_rw = ON;
query_attrs_add hlc_ts_lower_bound $hlc;
--error ER_INVALID_NONCURRENT_DB_RW_FOR_HLC_READ_BOUND
SELECT * FROM c.tc;
query_attrs_reset;
SET @@session.allow_noncurrent_db_rw = OFF;

# =============================================================================
# Verify that MTS behaves as expected with HLCs + multiple databases
# =============================================================================

connection slave;
STOP SLAVE;
SET @@global.slave_parallel_workers = 8;
SET @@global.slave_use_idempotent_for_recovery= YES;
SET @@global.mts_dependency_replication = TBL;
START SLAVE;

# Create a blocking transaction on the slave
connection slave1;
USE a;
BEGIN;
UPDATE ta SET b = 'foo' WHERE a = 3;

connection master;

USE a;
BEGIN;
UPDATE ta SET b = 'bar' WHERE a = 3;
COMMIT;
let $hlc_a = get_response_attribute hlc_ts;
--echo HLC: $hlc_a

USE b;
BEGIN;
INSERT INTO tb (a, b) VALUES (7, 'baz');
COMMIT;
let $hlc_b = get_response_attribute hlc_ts;
--echo HLC: $hlc_b

USE c;
BEGIN;
INSERT INTO tc (a, b) VALUES (7, 'baz');
COMMIT;
let $hlc_c = get_response_attribute hlc_ts;
--echo HLC: $hlc_c

connection slave;

# Can't use sync_slave_sql_with_master.inc since one txn is hanging intentionally

# Wait for the database b transaction to apply
USE b;
let $wait_condition= SELECT COUNT(*) = 1 FROM tb WHERE a = 7;
let $wait_timeout = 20;
source include/wait_condition.inc;

# Wait for the database c transaction to apply
USE c;
let $wait_condition= SELECT COUNT(*) = 1 FROM tc WHERE a = 7;
let $wait_timeout = 20;
source include/wait_condition.inc;

USE a;
query_attrs_add hlc_ts_lower_bound $hlc_a;
--error ER_STALE_HLC_READ
SELECT * FROM ta;
query_attrs_reset;

USE b;
query_attrs_add hlc_ts_lower_bound $hlc_a;
SELECT * FROM tb;
query_attrs_reset;

USE c;
query_attrs_add hlc_ts_lower_bound $hlc_a;
SELECT * FROM tc;
query_attrs_reset;

connection slave1;
ROLLBACK;

--echo Reset state

connection master;
DROP DATABASE a;
DROP DATABASE b;
DROP DATABASE c;

SET @@global.enable_binlog_hlc = default;
SET @@global.enable_block_stale_hlc_read = default;
SET @@global.maintain_database_hlc = default;
SET @@global.minimum_hlc_ns = 0;

connection slave;
--source include/sync_slave_sql_with_master.inc
SET @@global.enable_binlog_hlc = default;
SET @@global.enable_block_stale_hlc_read = default;
SET @@global.maintain_database_hlc = default;
SET @@global.slave_parallel_workers = default;
SET @@global.slave_use_idempotent_for_recovery = default;
SET @@global.mts_dependency_replication = default;

connection master;
source include/rpl_end.inc;
