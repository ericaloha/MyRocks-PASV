source include/master-slave.inc;

# Enable trx meta data
connection master;
set @save.binlog_trx_meta_data= @@global.binlog_trx_meta_data;
set @@global.binlog_trx_meta_data= true;

connection slave;
set @save.binlog_trx_meta_data= @@global.binlog_trx_meta_data;
set @@global.binlog_trx_meta_data= true;

# Generate load
connection master;
--disable_warnings
drop database if exists test2;
drop database if exists test3;
drop database if exists test4;
--enable_warnings

# Create two databases with valid JSON string as db_metadata
create database test2 db_metadata '{"shard":"test2_shard", "replicaset":"test2_replicaset"}';
create database test3 db_metadata '{"shard":"test3_shard", "replicaset":"test3_replicaset"}';

# test db does not have db_metadata
use test;
create table t1 (a int primary key, b char(8));
insert into t1 values(1, 'a');
insert into t1 values(2, 'b');

# switch to a database having db_metadata
use test2;
create table t1 (a int primary key, b char(8));
insert into t1 values(1, 'a');
insert into t1 values(2, 'b');

# switch to a database having db_metadata
use test3;
create table t1 (a int primary key, b char(8));
insert into t1 values(1, 'a');
insert into t1 values(2, 'b');

# alter the db_metadata of test3
alter database test3 db_metadata '{"shard":"test3_shard_updated", "replicaset":"test3_replicaset_updated"}';
insert into t1 values(3, 'c');
insert into t1 values(4, 'd');

# create a new database but do not switch to it
create database test4 db_metadata '{"shard":"newly_added_shard_for_test4", "replicaset":"new_replicaset_for_test4"}';
# these will be added to test3.t1
insert into t1 values(5, 'e');
insert into t1 values(6, 'f');

# switch to the newly created database having db_metadata
use test4;
create table t1 (a int primary key, b char(8));
insert into t1 values(1, 'a');
insert into t1 values(2, 'b');

enable_result_log;

# Check binlogs for meta data
connection master;
let $MYSQLD_DATADIR = `select @@datadir`;
let $MYSQLD_SECURE_FILE_DIR = `select @@secure_file_priv`;
# Extracting and recreating the JSON through python's JSON lib so that the test is deterministic when we use diff JSON libs to produce TRX_META_DATA
exec $MYSQL_BINLOG -v -v $MYSQLD_DATADIR/master-bin.0* | grep '::TRX_META_DATA::' | sed 's/\"[0-9]*\"/\"ts\"/g' | sed 's/# \/\*::TRX_META_DATA:://g' | sed 's/}\*\//}/g' | python2 -c 'import sys, json; l = map(lambda line: json.dumps(json.loads(line.strip())), sys.stdin); print "\n".join(l)' > $MYSQLD_SECURE_FILE_DIR/binlog_db_metadata.dat;
exec cat $MYSQLD_SECURE_FILE_DIR/binlog_db_metadata.dat;
remove_file $MYSQLD_SECURE_FILE_DIR/binlog_db_metadata.dat;
--source include/sync_slave_sql_with_master.inc

connection slave;
let $MYSQLD_DATADIR = `select @@datadir`;
let $MYSQLD_SECURE_FILE_DIR = `select @@secure_file_priv`;
# Extracting and recreating the JSON through python's JSON lib so that the test is deterministic when we use diff JSON libs to produce TRX_META_DATA
exec $MYSQL_BINLOG -v -v $MYSQLD_DATADIR/slave-bin.0* | grep '::TRX_META_DATA::' | sed 's/\"[0-9]*\"/\"ts\"/g' | sed 's/# \/\*::TRX_META_DATA:://g' | sed 's/}\*\//}/g' | python2 -c 'import sys, json; l = map(lambda line: json.dumps(json.loads(line.strip())), sys.stdin); print "\n".join(l)' > $MYSQLD_SECURE_FILE_DIR/binlog_db_metadata.dat;
exec cat $MYSQLD_SECURE_FILE_DIR/binlog_db_metadata.dat;
remove_file $MYSQLD_SECURE_FILE_DIR/binlog_db_metadata.dat;

# Cleanup
connection master;
use test;
drop table if exists t1;
drop database if exists test2;
drop database if exists test3;
drop database if exists test4;

--source include/sync_slave_sql_with_master.inc

connection slave;
set @@global.binlog_trx_meta_data= @save.binlog_trx_meta_data;
connection master;
set @@global.binlog_trx_meta_data= @save.binlog_trx_meta_data;

source include/rpl_end.inc;
