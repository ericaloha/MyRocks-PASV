source include/master-slave.inc;
source include/have_slave_use_idempotent_for_recovery.inc;

call mtr.add_suppression("Error_code: 1593");
call mtr.add_suppression("The slave coordinator and worker threads are stopped");
call mtr.add_suppression("The slave coordinator and worker threads are stopped");
call mtr.add_suppression("Error in Log_event::read_log_event()");
call mtr.add_suppression("Recovery from master pos");

connection slave;
source include/stop_slave.inc;
change master to master_auto_position=1;
source include/start_slave.inc;

# Create a schema without PK
connection master;
create table t1(a int) engine = innodb;
let $master_port= `select @@global.port`;
source include/sync_slave_sql_with_master.inc;

connection slave;
flush logs;

# Write some data
connection master;
insert into t1 values(1);
insert into t1 values(2);
insert into t1 values(3);
insert into t1 values(4);
insert into t1 values(5);
source include/sync_slave_sql_with_master.inc;

connection slave;
echo "Table contents on the slave before crash:";
select * from t1;

let $gtids= `select @@global.gtid_executed`;
let $MYSQLD_DATADIR = `select @@datadir`;
let $slave_binlog_file = query_get_value("SHOW MASTER STATUS", "File", 1);
let $slave_binlog_size = query_get_value("SHOW MASTER STATUS", "Position", 1);

# Truncate the binlog
let $half = `select ROUND($slave_binlog_size / 2)`;
exec truncate -s $half $MYSQLD_DATADIR/$slave_binlog_file;
flush engine logs;

let $rpl_server_number = 2;
let $rpl_start_with_gtids = 1;
let $rpl_force_stop = 1;
source include/rpl_restart_server.inc;

connection slave;
echo "Table contents on the slave after crash:";
select * from t1;

start slave;
let $slave_sql_errno= convert_error(ER_SLAVE_FATAL_ERROR);
source include/wait_for_slave_sql_error.inc;

echo "Table contents on the slave after recovery fails:";
select * from t1;

source include/stop_slave.inc;
reset master;
disable_query_log;
eval set @@global.gtid_purged= "$gtids";
eval change master to master_host="127.0.0.1", master_port=$master_port, master_user="root", master_auto_position=1;
enable_query_log;
source include/start_slave.inc;

connection master;
drop table t1;
source include/sync_slave_sql_with_master.inc;

# Create a blackhole schema without PK
connection master;
create table t1(a int) engine = blackhole;
create table t2(a int primary key) engine = innodb; # this is only to update engine pos
source include/sync_slave_sql_with_master.inc;

connection slave;
flush logs;

# Write some data
connection master;
insert into t1 values(1);
insert into t1 values(2);
insert into t1 values(3);
insert into t1 values(4);
insert into t1 values(5);
insert into t2 values(1); # to update engine pos
source include/sync_slave_sql_with_master.inc;

connection slave;
let $MYSQLD_DATADIR = `select @@datadir`;
let $slave_binlog_file = query_get_value("SHOW MASTER STATUS", "File", 1);
let $slave_binlog_size = query_get_value("SHOW MASTER STATUS", "Position", 1);

# Truncate the binlog
let $half = `select ROUND($slave_binlog_size / 2)`;
exec truncate -s $half $MYSQLD_DATADIR/$slave_binlog_file;
flush engine logs;

let $rpl_server_number = 2;
let $rpl_start_with_gtids = 1;
let $rpl_force_stop = 1;
source include/rpl_restart_server.inc;

connection slave;
echo "The slave will continue even though t1 doesn't have PK because it's a blackhole table";
source include/start_slave.inc;

connection master;
drop table t1;
drop table t2;
source include/sync_slave_sql_with_master.inc;

source include/rpl_end.inc;
